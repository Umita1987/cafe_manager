from rest_framework import serializers
from .models import Order, OrderItem


class OrderItemSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ.

    –ü–æ–ª—è:
    - üîπ `id` (int) ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–ª—é–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏).
    - üîπ `name` (str) ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è `PATCH`).
    - üîπ `price` (Decimal) ‚Äî —Ü–µ–Ω–∞ –±–ª—é–¥–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É (–º–æ–∂–µ—Ç –±—ã—Ç—å `None` –≤ `PATCH`).
    - üîπ `quantity` (int) ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –µ–¥–∏–Ω–∏—Ü –±–ª—é–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1).
    """

    price: serializers.DecimalField = serializers.DecimalField(max_digits=10, decimal_places=2, coerce_to_string=False, required=False)
    name: serializers.CharField = serializers.CharField(required=False)  # ‚úÖ `name` –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è PATCH
    quantity: serializers.IntegerField = serializers.IntegerField(required=False)
    id: serializers.IntegerField = serializers.IntegerField(required=False)

    class Meta:
        model = OrderItem
        fields = ['id', 'name', 'price', 'quantity']


class OrderSerializer(serializers.ModelSerializer):
    """
    –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∑–∞–∫–∞–∑–æ–≤.

    –ü–æ–ª—è:
    - üîπ `id` (int) ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–∞–∑–∞.
    - üîπ `table_number` (int) ‚Äî –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞.
    - üîπ `status` (str) ‚Äî —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ (`pending`, `ready`, `paid`).
    - üîπ `total_price` (Decimal) ‚Äî –æ–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ (–ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏).
    - üîπ `items` (list) ‚Äî —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –≤ –∑–∞–∫–∞–∑–µ.
    """

    items: serializers.ListField = OrderItemSerializer(many=True)  # ‚úÖ –í–ª–æ–∂–µ–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä

    class Meta:
        model = Order
        fields = ['id', 'table_number', 'status', 'total_price', 'items']

    def create(self, validated_data: dict) -> Order:
        """
        üîπ –°–æ–∑–¥–∞–µ—Ç –∑–∞–∫–∞–∑ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–µ–º—É –±–ª—é–¥–∞.
        """
        items_data: list[dict] = validated_data.pop('items', [])
        order: Order = Order.objects.create(**validated_data)

        # ‚úÖ –°–æ–∑–¥–∞–µ–º –±–ª—é–¥–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º
        for item in items_data:
            OrderItem.objects.create(order=order, **item)

        order.calculate_total()  # ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É
        return order

    def update(self, instance, validated_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ PUT (–ø–æ–ª–Ω–∞—è –∑–∞–º–µ–Ω–∞) –∏ PATCH (—á–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)"""
        items_data = validated_data.pop('items', None)  # ‚úÖ –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª—é–¥–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
        print(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑ {instance.id} —Å –±–ª—é–¥–∞–º–∏:")
        is_full_update = self.partial is False  # `False` ‚Üí –∑–Ω–∞—á–∏—Ç —ç—Ç–æ `PUT`


        # ‚úÖ –ï—Å–ª–∏ PUT, –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥
        if is_full_update and items_data is not None:
            instance.items.all().delete()

        # ‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∑–∞–∫–∞–∑–∞ (–Ω–æ–º–µ—Ä —Å—Ç–æ–ª–∞, —Å—Ç–∞—Ç—É—Å)
        for attr, value in validated_data.items():
            setattr(instance, attr, value)
        instance.save()

        if items_data is not None:
            existing_items = {item.id: item for item in instance.items.all()}  # üîç –°–æ–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –±–ª—é–¥–∞

            for item_data in items_data:
                item_id = item_data.get("id")

                if item_id:
                    # üî• –ï—Å–ª–∏ –±–ª—é–¥–æ —Å —Ç–∞–∫–∏–º `id` –Ω–µ—Ç –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ ‚Üí –æ—à–∏–±–∫–∞!
                    if item_id not in existing_items:
                        raise serializers.ValidationError({
                            "items": f"–ë–ª—é–¥–æ —Å id {item_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —ç—Ç–æ–º –∑–∞–∫–∞–∑–µ."
                        })

                    # ‚úÖ –ï—Å–ª–∏ –±–ª—é–¥–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Üí –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—è
                    item = existing_items[item_id]
                    for key, val in item_data.items():
                        if key != "id":  # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º `id`
                            setattr(item, key, val)
                    item.save()

                elif not item_id:
                    # ‚ûï –ï—Å–ª–∏ `id` –Ω–µ—Ç, —ç—Ç–æ **–ù–û–í–û–ï** –±–ª—é–¥–æ ‚Üí `name` –∏ `price` –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
                    if "name" not in item_data or not item_data["name"]:
                        raise serializers.ValidationError({"name": "Name is required for new items."})
                    if "price" not in item_data:
                        raise serializers.ValidationError({"price": "Price is required for new items."})
                    OrderItem.objects.create(order=instance, **item_data)

        instance.calculate_total()  # ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        return instance